// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/code.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeServiceInterface is a mock of CodeServiceInterface interface.
type MockCodeServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCodeServiceInterfaceMockRecorder
}

// MockCodeServiceInterfaceMockRecorder is the mock recorder for MockCodeServiceInterface.
type MockCodeServiceInterfaceMockRecorder struct {
	mock *MockCodeServiceInterface
}

// NewMockCodeServiceInterface creates a new mock instance.
func NewMockCodeServiceInterface(ctrl *gomock.Controller) *MockCodeServiceInterface {
	mock := &MockCodeServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCodeServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeServiceInterface) EXPECT() *MockCodeServiceInterfaceMockRecorder {
	return m.recorder
}

// GenerateVerificationCode mocks base method.
func (m *MockCodeServiceInterface) GenerateVerificationCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVerificationCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateVerificationCode indicates an expected call of GenerateVerificationCode.
func (mr *MockCodeServiceInterfaceMockRecorder) GenerateVerificationCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVerificationCode", reflect.TypeOf((*MockCodeServiceInterface)(nil).GenerateVerificationCode))
}

// Send mocks base method.
func (m *MockCodeServiceInterface) Send(ctx context.Context, biz, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, biz, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCodeServiceInterfaceMockRecorder) Send(ctx, biz, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCodeServiceInterface)(nil).Send), ctx, biz, phone)
}

// Verify mocks base method.
func (m *MockCodeServiceInterface) Verify(ctx context.Context, biz, phone, inputCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, inputCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCodeServiceInterfaceMockRecorder) Verify(ctx, biz, phone, inputCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCodeServiceInterface)(nil).Verify), ctx, biz, phone, inputCode)
}

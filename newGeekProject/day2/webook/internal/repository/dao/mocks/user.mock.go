// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/user.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	dao "GeekProject/newGeekProject/day2/webook/internal/repository/dao"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDaoInterface is a mock of UserDaoInterface interface.
type MockUserDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoInterfaceMockRecorder
}

// MockUserDaoInterfaceMockRecorder is the mock recorder for MockUserDaoInterface.
type MockUserDaoInterfaceMockRecorder struct {
	mock *MockUserDaoInterface
}

// NewMockUserDaoInterface creates a new mock instance.
func NewMockUserDaoInterface(ctrl *gomock.Controller) *MockUserDaoInterface {
	mock := &MockUserDaoInterface{ctrl: ctrl}
	mock.recorder = &MockUserDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDaoInterface) EXPECT() *MockUserDaoInterfaceMockRecorder {
	return m.recorder
}

// EditUser mocks base method.
func (m *MockUserDaoInterface) EditUser(cxt context.Context, userDB dao.UserDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUser", cxt, userDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUser indicates an expected call of EditUser.
func (mr *MockUserDaoInterfaceMockRecorder) EditUser(cxt, userDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUser", reflect.TypeOf((*MockUserDaoInterface)(nil).EditUser), cxt, userDB)
}

// FindByEmail mocks base method.
func (m *MockUserDaoInterface) FindByEmail(cxt context.Context, email string) (dao.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", cxt, email)
	ret0, _ := ret[0].(dao.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserDaoInterfaceMockRecorder) FindByEmail(cxt, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserDaoInterface)(nil).FindByEmail), cxt, email)
}

// FindById mocks base method.
func (m *MockUserDaoInterface) FindById(cxt context.Context, Id int64) (dao.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", cxt, Id)
	ret0, _ := ret[0].(dao.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserDaoInterfaceMockRecorder) FindById(cxt, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserDaoInterface)(nil).FindById), cxt, Id)
}

// FindByPhone mocks base method.
func (m *MockUserDaoInterface) FindByPhone(cxt context.Context, phone string) (dao.UserDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", cxt, phone)
	ret0, _ := ret[0].(dao.UserDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserDaoInterfaceMockRecorder) FindByPhone(cxt, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserDaoInterface)(nil).FindByPhone), cxt, phone)
}

// InsertUser mocks base method.
func (m *MockUserDaoInterface) InsertUser(cxt context.Context, userDB dao.UserDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", cxt, userDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserDaoInterfaceMockRecorder) InsertUser(cxt, userDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDaoInterface)(nil).InsertUser), cxt, userDB)
}
